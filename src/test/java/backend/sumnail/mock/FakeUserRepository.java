package backend.sumnail.mock;

import backend.sumnail.domain.user.entity.User;
import backend.sumnail.domain.user.repository.UserRepository;
import backend.sumnail.global.exception.CustomException;
import backend.sumnail.global.exception.ErrorCode;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();
    @Override
    public User getById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny()
                .orElseThrow(() -> new CustomException(ErrorCode.NOT_FOUND_USER));
    }

    @Override
    public void save(User user) {
        if(user.getId() == 0){
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name("썸네일")
                    .email("sed@yahoo.edu")
                    .profileImage("https://guardian.co.uk/one")
                    .build();
            data.add(newUser);
        }else{
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
        }
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(item -> item.getEmail().equals(email)).findAny();
    }
}
