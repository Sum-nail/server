package backend.sumnail.mock;

import backend.sumnail.domain.nail_shop.entity.NailShop;
import backend.sumnail.domain.nail_shop.service.port.NailShopRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

public class FakeNailShopRepository implements NailShopRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<NailShop> data = new ArrayList<>();

    @Override
    public Page<NailShop> findAll(Pageable pageable) {
        int pageSize = pageable.getPageSize();
        int currentPage = pageable.getPageNumber();
        int startItem = currentPage * pageSize;
        List<NailShop> pageData;

        if (data.size() < startItem) {
            pageData = Collections.emptyList();
        } else {
            int toIndex = Math.min(startItem + pageSize, data.size());
            pageData = data.subList(startItem, toIndex);
        }

        return new PageImpl<>(pageData, pageable, data.size());
    }

    @Override
    public List<NailShop> findByHashtagAndStation(String stationName, List<String> hashtags) {
        return data.stream()
                .filter(item -> item.getStations().stream()
                        .anyMatch(station -> station.getStation().getStationName().contains(stationName))
                        && item.getHashtags().stream()
                        .anyMatch(hashtag -> hashtags.contains(hashtag.getHashtag().getHashtagName())))
                .toList();
    }

    @Override
    public NailShop getById(long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny()
                .orElseThrow();
    }


    public void save(NailShop nailShop) {
        if (nailShop.getId() == null || nailShop.getId() == 0) {
            NailShop newNailShop = NailShop.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .titleImage(nailShop.getTitleImage())
                    .location(nailShop.getLocation())
                    .name(nailShop.getName())
                    .build();
            data.add(newNailShop);
        } else {
            data.removeIf(it -> Objects.equals(it.getId(), nailShop.getId()));
            data.add(nailShop);
        }
    }
}
