package backend.sumnail.mock;

import backend.sumnail.domain.recentsearch.entity.RecentSearch;
import backend.sumnail.domain.recentsearch.repository.RecentSearchRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRecentSearchRepository implements RecentSearchRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<RecentSearch> data = new ArrayList<>();

    @Override
    public void deleteByUserId(long userId) {
        data.removeIf(item -> item.getUser().getId().equals(userId));
    }

    @Override
    public List<RecentSearch> findByUserId(long userId) {
        return data.stream()
                .filter(item -> item.getUser().getId().equals(userId))
                .toList();
    }

    @Override
    public void save(RecentSearch recentSearch) {
        if (recentSearch.getId() == null || recentSearch.getId() == 0) {
            RecentSearch newRecentSearch = RecentSearch.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .user(recentSearch.getUser())
                    .station(recentSearch.getStation())
                    .dateTime(recentSearch.getDateTime())
                    .build();
            data.add(newRecentSearch);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), recentSearch.getId()));
            data.add(recentSearch);
        }
    }

    @Override
    public void deleteByStation(String station) {
        data.removeIf(item -> item.getStation().equals(station));
    }

    @Override
    public List<RecentSearch> findByStation(String station) {
        return data.stream()
                .filter(item -> item.getStation().equals(station))
                .toList();
    }
}
