package backend.sumnail.mock;

import backend.sumnail.domain.refresh_token.entity.RefreshToken;
import backend.sumnail.domain.refresh_token.repository.RefreshTokenRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<RefreshToken> data = new ArrayList<>();

    @Override
    public Optional<RefreshToken> findByKeyUserId(Long userId) {
        return data.stream()
                .filter(item -> item.getKeyUserId().equals(userId))
                .findAny();
    }

    @Override
    public void save(RefreshToken refreshToken) {
        if (refreshToken.getId() == null || refreshToken.getId() == 0) {
            RefreshToken newRefreshToken = RefreshToken.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .refreshToken(refreshToken.getRefreshToken())
                    .keyUserId(refreshToken.getKeyUserId())
                    .build();
            data.add(newRefreshToken);
        } else {
            data.removeIf(it -> Objects.equals(it.getId(), refreshToken.getId()));
            data.add(refreshToken);
        }

    }
}
